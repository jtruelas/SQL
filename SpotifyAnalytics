# I created a table based on Spotify found on Kaggle
# Then I inserted data using a .csv file
# Finally I explored the data with a few questions

# Creation of table:

CREATE TABLE BIT_DB.Spotifydata(
id INTEGER PRIMARY KEY AUTOINCREMENT,
artist_name VARCHAR NOT NULL,
track_name VARCHAR NOT NULL,
track_id VARCHAR NOT NULL,
popularity INTEGER NOT NULL,
danceability DECIMAL(4, 3) NOT NULL,
energy DECIMAL(4, 3) NOT NULL,
song_key INTEGER NOT NULL,
loudness DECIMAL(5, 3) NOT NULL,
song_mode INTEGER NOT NULL,
speechiness DECIMAL(5, 4) NOT NULL,
acoutsticness DECIMAL(6, 5) NOT NULL,
instrumentalness DECIMAL(8, 7) NOT NULL,
liveness DECIMAL(5, 4) NOT NULL,
valence DECIMAL(4, 3) NOT NULL,
tempo DECIMAL(6, 3) NOT NULL,
duration_ms INTEGER NOT NULL,
time_signature INTEGER NOT NULL);

# Using a csv file I insert data into the table created

# I formulated the following queries based on the data available

-- Find average popularity by artist

SELECT Spotifydata.artist_name, ROUND(AVG(Spotifydata.popularity), 2) AS average_popularity
FROM BIT_DB.Spotifydata Spotifydata
GROUP BY Spotifydata.artist_name
ORDER BY average_popularity DESC;

-- Create a Top Hits playlist (Top 10 popular songs)

SELECT Spotifydata.artist_name, Spotifydata.track_name
FROM BIT_DB.Spotifydata Spotifydata
ORDER BY Spotifydata.popularity DESC
LIMIT 10;

-- Create a Party playlist (Top 10 danceability and energy songs)

SELECT Spotifydata.artist_name, Spotifydata.track_name
FROM BIT_DB.Spotifydata Spotifydata
WHERE Spotifydata.danceability > 0.75
AND Spotifydata.energy > 0.69
ORDER BY Spotifydata.danceability DESC, Spotifydata.energy DESC
LIMIT 10;

-- Create a Workout playlist (Top 10 high valence and tempo songs)

SELECT Spotifydata.artist_name, Spotifydata.track_name
FROM BIT_DB.Spotifydata Spotifydata
WHERE Spotifydata.tempo > 90
AND Spotifydata.valence > 0.71
ORDER BY Spotifydata.tempo DESC, Spotifydata.valence DESC
LIMIT 10;
